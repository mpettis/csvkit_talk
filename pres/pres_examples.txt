PRESENTATION EXAMPLES
========================================================================

Assuming your present working directory is the root directory of this git repository.


o. Raw CSV

    cat dat/mtcars_001.csv



o. Formatted CSV : csvlook

    # Good for a quick peek
    # Useful if you are on a server without a gui.
    # Often like to copy and paste these results into emails if small.

    csvlook dat/mtcars_001.csv




o. Formatted CSV, wide

    # `-S' switch on `less' stops lines from wrapping...

    head -4 dat/wide_mtcars.csv | csvlook | less -S



o. Getting fancy, combining with bash utilities.

    for f in $(ls example_cfg/*.csv); do
        echo
        echo
        echo "line count and file name: " $(wc -l $f)
        echo "=================================="
        echo
        head $f | csvlook
    done | less -S



................................

o. Stack files (and format)

    # Quick peak at a set of identically formatted files

    ls -l dat/mtcars_0*.csv
    for f in $(ls dat/mtcars_0*.csv); do echo; echo $f; head $f; done | less
    for f in $(ls dat/mtcars_0*.csv); do echo; echo $f; head $f | csvlook; done | less


    # Nice to put them all in one output

    csvstack --filenames dat/mtcars_0*.csv | less
    csvstack --filenames dat/mtcars_0*.csv | csvlook | less



................................

o. Validate files

    # Can you find columns or cells with missing data?
    cat dat/mtcars_blank-select_cells.csv


    # How about now?
    csvlook dat/mtcars_blank-select_cells.csv


    # How about now?
    csvstat --nulls dat/mtcars_blank-select_cells.csv


    # Automate this
    csvstat --max dat/mtcars_blank-select_cells.csv



................................

o. Cleaning files

    # A good file
    cat dat/escape_good.csv

    # A good file turned into a bad file
    # Missing double quotes makes for wrong determination of columns
    cat dat/escape_bad.csv

    # You can see the impact quickly and directly
    csvlook dat/escape_bad.csv

    # Assuming the header is right, you can tell which other rows have wrong columns
    csvclean -n dat/escape_bad.csv

    # You can automatically keep rows that are good, and spit out rows that are bad
    csvclean dat/escape_bad.csv

        # Errors go to '_err' file, good lines go to '_out' file
    less dat/escape_bad_err.csv
    less dat/escape_bad_out.csv



................................

o. Getting from Excel to csv

    open dat/xlsx_mtcars.xlsx

    in2csv --sheet "mtcars-s1" dat/xlsx_mtcars.xlsx | less -S

    in2csv --sheet "mtcars-s2" dat/xlsx_mtcars.xlsx | less -S

    # How about formulas and dates?
    # It performs the calculation AND pulls back the date (but in YYYY-MM-DD format)
    # Here, the second column has a calculation
    # And in the third column, the first value is set, and the remaining are calculations.
    in2csv --sheet "Sheet1" formulas-and-dates.xlsx
................................

o. Treating csv files as sql tables

    # Compute average of a column
    csvsql --query "select avg(mpg) as avg_mpg from mtcars_001" dat/mtcars_001.csv

    # Find rows with a value missing in a column
    csvsql --query "select * from \"mtcars_blank-select_cells\" where gear is null" dat/mtcars_blank-select_cells.csv

    # zeroing in on missing columns like a boss
    csvstack --filenames dat/mtcars_0*.csv dat/mtcars_blank-select_cells.csv | csvstat --nulls
    csvstack --filenames dat/mtcars_0*.csv dat/mtcars_blank-select_cells.csv | csvsql --query "select * from stdin where cyl is null" | csvlook


    csvstack --filenames dat/mtcars_0*.csv dat/mtcars_blank-select_cells.csv | csvsql --query "select * from stdin where cyl == 8" | csvlook
    csvstack --filenames dat/mtcars_0*.csv dat/mtcars_blank-select_cells.csv | csvsql --query "select * from stdin where name == 'AMC Javelin'" | csvlook


